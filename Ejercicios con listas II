'''
 Ejercicios con listas II
 Por http://about.me/carlosgbr
 Fecha: 08/11/15
 Versión 1
 Para Python 3.0 y superior
 Ejemplos de creación de listas utilizando comprensión de listas, funciones lambda y Partición de listas
 '''
 
#Genera una listade todos los números pares entre 0 y 50
evens_to_50 = [i for i in range(51) if i % 2 == 0]
print evens_to_50

#****************************************************************************************************

#Comprensión de lista para crear una lista llamada cuadrados_pares 
#cuadrados_pares incluye los cuadrados de los números del 1 al 10 que sean divisibles por 2, inclusive.

cuadrados_pares = [x**2 for x in range (1,11) if x**2 %2 ==0]

print cuadrados_pares

#****************************************************************************************************

#Comprensión de lista para crear una lista, cubos_por_cuatro, 
#que consiste en los cubos de los números del 1 al 10 que son divisibles por cuatro. 

cubos_por_cuatro = [x**3 for x in range(1,11) if x**3 % 4 == 0]
print cubos_por_cuatro 

#****************************************************************************************************

'''
PARTICIÓN DE LISTAS
El particionado de listas nos permite acceder a elementos de una lista de manera concisa. La sintaxis se ve así:
[start:end:stride]
Donde start describe donde empieza la partición (inclusive), end es donde termina (exclusive), ^
y stride describe el espacio entre los elementos de la lista particionada. 
Por ejemplo, un stride (paso) de 2 seleccionaría un elemento de por medio de la lista original para ponerlo 
en la lista particionada.
'''

l = [i**2 for i in range(1,11)]
# Debería ser [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

print l[2:9:2]

#****************************************************************************************************

'''
Usa el particionado de listas para imprimir un elemento de por medio de mi_lista desde el principio hasta el final. 
Omite los índices apropiados para hacer esto. 
'''

mi_lista = range(1,11) # Lista de números 1 - 10
print mi_lista[::2]

#****************************************************************************************************

'''
Invertir una lista
'''

mi_lista = range(1,11)
# ¡Agrega tu código debajo!
hacia_atras = mi_lista[::-1]

print hacia_atras

#****************************************************************************************************

'''
Crea una variable, hacia_atras_de_diez_en_diez, y la fíja igual al resultado de ir hacia atrás hasta_cien 
de diez en diez. Continúa e imprime hacia_atras_de_diez_en_diez en la consola.
'''

hasta_cien = range(101)
# ¡Agrega tu código debajo!

hacia_atras_de_diez_en_diez = hasta_cien[::-10]
print hacia_atras_de_diez_en_diez


#****************************************************************************************************

'''
Crea una lista, hasta_21, que contiene los números del 1 al 21, inclusive.
Crea una segunda lista, impares, igual a hasta_21, pero solo incluye los números impares (1, 3, 5, etcétera). 
Usa el particionado de listas para este en lugar de una comprensión de listas.
Por último, crea una tercera lista, tercio_medio, igual al tercio de la mitad de hasta_21. 
'''

hasta_21 = [x for x in range(1,22)]
impares =  hasta_21[1::2]
tercio_medio = hasta_21[8:15:]

#****************************************************************************************************

'''
Funciones anónimas: Funciones Lambda
Uno de los aspectos más poderosos de Python es que permite un estilo de programación llamado programación funcional, 
que quiere decir que puedes pasar funciones como si fueran variables o valores. 
A veces lo damos por sentado, ¡pero no todos los lenguajes lo permiten!

lambda x: x % 3 == 0
Es igual que

def por_tres(x):
    return x % 3 == 0
Solo cuando no necesitamos realmente darle un nombre a la función; 
hace su trabajo y devuelve un valor sin tener uno. 
Es por esto que la función lambda es una función anónima.

'''

mi_lista = range(16)
print filter(lambda x: x % 3 == 0, mi_lista)

#****************************************************************************************************

#Completa la llamada a filter() en el editor de manera que el único lenguaje que se imprima de la lista sea "Python".
lenguajes = ["HTML", "JavaScript", "Python", "Ruby"]
print filter(lambda x: x=="Python", lenguajes)

#****************************************************************************************************

'''Crea una lista, cuadrados, que consiste en los cuadrados de los números del 1 al 10. 
Usa filter() y una expresión lambda para imprimir los cuadrados que se encuentren entre 30 y 70.
'''

cuadrados = [x**2 for x in range(1,11)]
print filter(lambda x: x >= 30 and x<=70, cuadrados)

#****************************************************************************************************

'''
Usa una comprensión de lista para crear una lista, treses_y_cincos, que consiste en los números del 1 al 15 (inclusive) 
que son divisibles por 3 ó 5.
'''

treses_y_cincos = [x for x in range(1,16) if x%3 == 0 or x%5 == 0]
print treses_y_cincos

#****************************************************************************************************

'''
El string en el editor es incomprensible. Usa el particionado de listas para extraer el mensaje 
y guárdalo en una variable llamada mensaje.
'''

incomprensible = "!XeXgXaXsXsXeXmX XtXeXrXcXeXsX XeXhXtX XmXaX XI"
reverse = incomprensible[::-1]
mensaje = ""
for x in reverse:
    if x != "X":
        mensaje += x

print mensaje

#****************************************************************************************************

'''
Te hemos proporcionado otra incomprensible (un poco diferente). 
Declara mensaje de nuevo, pero esta vez, fíjala igual a filter() 
y pasa la expresión lambda apropiada que filtrará las "X". 
Por último, print tu mensaje en la consola para que todos lo podamos ver.
'''

incomprensible = "IXXX aXXmX aXXXnXoXXXXXtXhXeXXXXrX sXXXXeXcXXXrXeXt mXXeXsXXXsXaXXXXXXgXeX!XX"
mensaje = filter(lambda x: x != "X", incomprensible)
print mensaje 

#****************************************************************************************************
